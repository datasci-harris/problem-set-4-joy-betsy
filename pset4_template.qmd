---
title: "PSet 4"
format: 
  pdf:
    keep-tex: true
    include-in-header: 
       text: |
         \usepackage{fvextra}
         \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
include-before-body:
  text: |
    \RecustomVerbatimEnvironment{verbatim}{Verbatim}{
      showspaces = false,
      showtabs = false,
      breaksymbolleft={},
      breaklines
    }
---

**PS4:** Due Sat Nov 2 at 5:00PM Central. Worth 100 points. 
We use (`*`) to indicate a problem that we think might be time consuming. 
    
## Style Points (10 pts) 
Please refer to the minilesson on code style
**[here](https://uchicago.zoom.us/rec/share/pG_wQ-pHTQrJTmqNn4rcrw5V194M2H2s-2jdy8oVhWHkd_yZt9o162IWurpA-fxU.BIQlSgZLRYctvzp-)**.

## Submission Steps (10 pts)
1. This problem set is a paired problem set.
2. Play paper, scissors, rock to determine who goes first. Call that person Betsy Shi.
    - Partner 1 (name and cnet ID): Betsy Shi
    - Partner 2 (name and cnet ID): Joy Wu
3. Partner 1 will accept the `ps4` and then share the link it creates with their partner. You can only share it with one partner so you will not be able to change it after your partner has accepted. 
4. "This submission is our work alone and complies with the 30538 integrity policy." Add your initials to indicate your agreement: BS JW
5. "I have uploaded the names of anyone else other than my partner and I worked with on the problem set **[here](https://docs.google.com/forms/d/185usrCREQaUbvAXpWhChkjghdGgmAZXA3lPWpXLLsts/edit)**"  (1 point)
6. Late coins used this pset: 0 Late coins left after submission: 3
7. Knit your `ps4.qmd` to an PDF file to make `ps4.pdf`, 
    * The PDF should not be more than 25 pages. Use `head()` and re-size figures when appropriate. 
8. (Partner 1): push  `ps4.qmd` and `ps4.pdf` to your github repo.
9. (Partner 1): submit `ps4.pdf` via Gradescope. Add your partner on Gradescope.
10. (Partner 1): tag your submission in Gradescope

**Important:** Repositories are for tracking code. **Do not commit the data or shapefiles to your repo.** The best way to do this is with `.gitignore`, which we have covered in class. If you do accidentally commit the data, Github has a [guide](https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-large-files-on-github#removing-files-from-a-repositorys-history). The best course of action depends on whether you have pushed yet. This also means that both partners will have to download the initial raw data and any data cleaning code will need to be re-run on both partners' computers. 

```{python}
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import geopandas as gpd
import time
import random
from shapely.ops import nearest_points
```

## Download and explore the Provider of Services (POS) file (10 pts)

1. 
2. 
    a.
    b.
3. 
```{python}
years = [2016, 2017, 2018, 2019]
data_frames = []

for year in years:
    
    file_path = f'{estfile}/pos{year}.csv'
    df = pd.read_csv(file_path, encoding='ISO-8859-1')
    df['year'] = year
    data_frames.append(df)

data_all = pd.concat(data_frames, ignore_index=True)
data_all = data_all[
    (data_all['PRVDR_CTGRY_SBTYP_CD'] == 1) & 
    (data_all['PRVDR_CTGRY_CD'] == 1)
]
```

4. 
    a.
    b.

## Identify hospital closures in POS file (15 pts) (*)

Variables:  

CCN(CMS Certification Number), 'PRVDR_NUM'  
Termination Code, 'PGM_TRMNTN_CD', 00=ACTIVE PROVIDER  
Facility Name, 'FAC_NAME'  
Zip Code, 'ZIP_CD'  


1. 
```{python}
data_all['PRVDR_NUM'] = pd.to_numeric(data_all['PRVDR_NUM'], errors='coerce')

active_2016 = data_all[(data_all['year'] == 2016) & (data_all['PGM_TRMNTN_CD'] == 0)]
active_2016 = active_2016[['PRVDR_NUM', 'FAC_NAME', 'ZIP_CD']]
original_list = active_2016['PRVDR_NUM'].unique()

closed_hospitals_list = []

for year in [2017, 2018, 2019]:
    # Active in current year
    active_year = data_all[(data_all['year'] == year) & (data_all['PGM_TRMNTN_CD'] == 0)]
    # Once appears in previous year
    active_year = active_year[active_year['PRVDR_NUM'].isin(original_list)]
    active_list_year = active_year['PRVDR_NUM'].unique()
    
    # Check active status
    closed_in_year = active_2016[~active_2016['PRVDR_NUM'].isin(active_list_year)]
    
    # Identify and record closure 
    closed_in_year = closed_in_year.copy()
    closed_in_year['Suspected_Closure_Year'] = year
    closed_hospitals_list.append(closed_in_year)

    # Renew base
    closed_list = closed_in_year['PRVDR_NUM'].unique()
    original_list = original_list[~np.isin(original_list, closed_list)]
    active_2016 = active_2016[active_2016['PRVDR_NUM'].isin(active_list_year)]


all_closed_hospitals = pd.concat(closed_hospitals_list, ignore_index=True)

num_closed = all_closed_hospitals.shape[0]
print(f'Number of hospitals suspected to have closed between 2016 and 2019: {num_closed}')
print(all_closed_hospitals[['PRVDR_NUM', 'FAC_NAME', 'ZIP_CD', 'Suspected_Closure_Year']].head())
```

2. 
```{python}
sorted_closed = all_closed_hospitals.sort_values(by='FAC_NAME')
top_10_closed = sorted_closed[['FAC_NAME', 'ZIP_CD', 'Suspected_Closure_Year']].head(10)
print(top_10_closed)
```

3. 
    a. & b.
```{python}
def identify_valid_closed_hospitals(df, list):
    valid_list = []
    potential_mergers = 0

    # Count active hospitals by year, zipcode
    active_hospitals_count = (
    df[df['PGM_TRMNTN_CD'] == 0]
    .groupby(['year', 'ZIP_CD'])
    .size()
    .unstack(fill_value=0)
)

    # Loop through all closed hospitals
    for _, closed_hospital in list.iterrows():
        zip_code = closed_hospital['ZIP_CD']
        closure_year = closed_hospital['Suspected_Closure_Year']
        next_year = closure_year + 1

        # Check only if the closure year is less than 2019
        if closure_year < 2019:
            current_year_count = active_hospitals_count.loc[closure_year, zip_code]
            next_year_count = active_hospitals_count.loc[next_year, zip_code]

            # Check if the number of active hospitals does not decrease
            if current_year_count > next_year_count:
                valid_list.append(closed_hospital)
            else:
                potential_mergers += 1

        else:
            valid_list.append(closed_hospital)  # Closure year is 2019 or later

    valid_closed_hospitals = pd.DataFrame(valid_list)
    num_valid_closed = valid_closed_hospitals.shape[0]

    return valid_closed_hospitals, num_valid_closed, potential_mergers

results = identify_valid_closed_hospitals(data_all, sorted_closed)

print(f'Number of potential mergers: {results[2]}')
print(f'Number of valid suspected hospital closures: {results[1]}')
print(results[0].head())
```

    c.
```{python}
valid_sorted_closed = results[0].sort_values(by='FAC_NAME')
top_10_closed = valid_sorted_closed[['FAC_NAME', 'ZIP_CD', 'Suspected_Closure_Year']].head(10)
print(top_10_closed)
```

## Download Census zip code shapefile (10 pt) 

1. 
    a.
    b. 
2. 
```{python}
# filepath = "/Users/yukireflection/Documents/GitHub/problem-set-4-joy-betsy/gz_2010_us_860_00_500k/gz_2010_us_860_00_500k.shp"
data_zip = gpd.read_file(filepath)
data_zip.head(100)

texas_prefixes = ('75', '76', '77', '78', '79')
zips_texas = data_zip[data_zip['ZCTA5'].str.startswith(texas_prefixes)]

# estfile = 'data'
# data = pd.read_csv(f'{estfile}/pos2016.csv')
hospitals_2016 = data[
    (data['PGM_TRMNTN_CD'] == 0) &
    (data['PRVDR_CTGRY_SBTYP_CD'] == 1) &
    (data['PRVDR_CTGRY_CD'] == 1)
].copy()

hospitals_2016['ZIP_CD'] = hospitals_2016['ZIP_CD'].astype(str).str[:5]
hospitals_2016['ZIP_CD'] = hospitals_2016['ZIP_CD'].str.zfill(5)
hospitals_texas = hospitals_2016[hospitals_2016['ZIP_CD'].str.startswith(texas_prefixes)].copy()

hospitals_per_zip = hospitals_texas.groupby('ZIP_CD')['PRVDR_NUM'].nunique().reset_index()
hospitals_per_zip.columns = ['ZIP_CD', 'hospital_count']

# Merge
zips_texas = zips_texas.copy()
zips_texas = zips_texas.merge(hospitals_per_zip, left_on='ZCTA5', right_on='ZIP_CD', how='left')
zips_texas['hospital_count'] = zips_texas['hospital_count'].fillna(0)


# Plot choropleth
fig, ax = plt.subplots(figsize=(14, 14))
zips_texas.plot(
    column='hospital_count',
    cmap='Blues',
    linewidth=0.8,
    ax=ax,
    edgecolor='0.6',
    legend=True,
    legend_kwds={'label': "Number of Hospitals", 'orientation': "horizontal"}
)
ax.set_title('Number of Hospitals per Zip Code in Texas', fontsize=15)
ax.set_axis_off()
plt.show()
```


## Calculate zip codeâ€™s distance to the nearest hospital (20 pts) (*)

1. 
```{python}
data_zip['centroid'] = data_zip.geometry.centroid
zips_all_centroids = gpd.GeoDataFrame(data_zip[['ZCTA5', 'centroid']], geometry='centroid', crs=data_zip.crs)
print("Dimensions of zips_all_centroids:", zips_all_centroids.shape)
```

ZCTA5: ZIP Code Tabulation Area  
centroid: The coordinates of the center of mass, stored as point geometric information, represent the location of the center of each zip code area.  


2. 
```{python}
zips_texas_centroids = zips_all_centroids[zips_all_centroids['ZCTA5'].str.startswith(texas_prefixes)]
num_texas_zip = zips_texas_centroids['ZCTA5'].nunique()
print("The Number of unique zip codes in Texas:", num_texas_zip)

border_states_prefixes = texas_prefixes + ('70', '71', '72', '73', '74', '87', '88')
zips_texas_borderstates_centroids = zips_all_centroids[zips_all_centroids['ZCTA5'].str.startswith(border_states_prefixes)]
num_borderstate_zip = zips_texas_borderstates_centroids['ZCTA5'].nunique()
print("The Number of unique zip codes in Texas and bordering states:", num_borderstate_zip)
```


3. 
```{python}
hospital_boarderstates = hospitals_2016[hospitals_2016['ZIP_CD'].str.startswith(border_states_prefixes)]
hospitals_per_zip = hospital_boarderstates['ZIP_CD'].value_counts().reset_index()
hospitals_per_zip.columns = ['ZIP_CD', 'hospital_count']

hospitals_per_zip['ZIP_CD'] = hospitals_per_zip['ZIP_CD'].astype(str).str.replace('.0', '', regex=False)
zips_texas_borderstates_centroids['ZCTA5'] = zips_texas_borderstates_centroids['ZCTA5'].astype(str).str.replace('.0', '', regex=False)


zips_withhospital_centroids = zips_texas_borderstates_centroids.merge(hospitals_per_zip, left_on = 'ZCTA5', right_on = 'ZIP_CD', how = 'left').fillna(0)
zips_withhospital_centroids = zips_withhospital_centroids[zips_withhospital_centroids['hospital_count'] >= 1]

print(len(zips_withhospital_centroids))
print(zips_withhospital_centroids.head())
```

I'm using left merge.  
Merge Variables: The variables used in the merge are ZCTA5 (from zips_texas_borderstates_centroids) and ZIP_CD (from hospitals_per_zip).  


4. 
    a.
```{python}
subset_zips = zips_texas_centroids.sample(n=10, random_state=10)

start_time = time.time()

def cal_nearest_distance(row, df):
    nearest_geom = nearest_points(row['centroid'], df.unary_union)[1]
    return row['centroid'].distance(nearest_geom)

subset_zips['nearest_distance'] = subset_zips.apply(cal_nearest_distance,
                                                    df=zips_withhospital_centroids,
                                                    axis=1)

end_time = time.time()

time_calculations = end_time - start_time
print(f"Time taken (10 zipcodes): {time_calculations} seconds")
time_all = time_calculations * (len(zips_texas_centroids)/10)
print(f"Time taken (all): {time_all} seconds")
```


    b.
```{python}
start_time_b = time.time()

zips_texas_centroids['nearest_distance'] = zips_texas_centroids.apply(cal_nearest_distance,
                                                                      df = zips_withhospital_centroids,
                                                                      axis = 1)

end_time_b = time.time()

time_calculations_b = end_time_b - start_time_b
print(f"Total time: {time_calculations_b} seconds")
```

The difference is significant, it actually runs much faster than I expected.  


    c.   

UNIT["Degree",0.017453292519943295] indicates that the unit is degree (latitude and longitude coordinates), and the number 0.017453292519943295 is the factor that converts degree to radian. Transform the latitude and longitude into UTM using pyproj coordinates to accurately calculate the distance (in meters).  
1m â‰ˆ 0.000621371miles  
```{python}
zips_texas_centroids = zips_texas_centroids.to_crs(epsg=32614)
zips_withhospital_centroids = zips_withhospital_centroids.to_crs(epsg=32614)

start_time_projected = time.time()

zips_texas_centroids['nearest_distance_meters'] = zips_texas_centroids.apply(
    cal_nearest_distance,
    df=zips_withhospital_centroids,
    axis=1
)

end_time_projected = time.time()

time_projected = end_time_projected - start_time_projected
print(f"Time taken with projected data: {time_projected / 60:.2f} minutes")
zips_texas_centroids['nearest_distance_miles'] = zips_texas_centroids['nearest_distance'] * 0.000621371
print(zips_texas_centroids[['ZCTA5', 'nearest_distance_miles']].head())
```


5. 
    a.
I started with a distance calculation using UTM (EPSG:32614), which gives the units of meters. The meters were then converted to miles in order to report the average distance from each ZIP code to the nearest hospital.


    b.
```{python}
average_distance_meters = zips_texas_centroids['nearest_distance_meters'].mean()
average_distance_miles = average_distance_meters * 0.000621371
print(f"Avg distance to the nearest hospital: {average_distance_miles:.2f} miles")
```

The average distance of 13.43 miles to the nearest hospital may seem like a reasonable result since Texas is a sparsely populated state.  
In Texas, the distance between hospitals varies by region. According to the 2022 American Hospital Association report, the average Texas resident would have to travel approximately 8.5 miles to reach the nearest hospital. There is also data showing that the average rural Texas resident is about twice as far from a hospital as an urban resident, at about 12.5 miles, demonstrating the challenges of healthcare access in rural areas.  
Reference:  
https://www.pewresearch.org/short-reads/2018/12/12/how-far-americans-live-from-the-closest-hospital-differs-by-community-type/  
https://www.aha.org/news/headline/2018-12-14-study-rural-residents-travel-about-twice-far-hospital-average  


    c.
```{python}
fig, ax = plt.subplots(figsize=(14, 14))
zips_texas_centroids.plot(
    column='nearest_distance_miles',
    cmap='Blues',
    linewidth=0.8,
    ax=ax,
    edgecolor='0.6',
    legend=True
)
ax.set_title('Distance to Nearest Hospital in Texas', fontsize=15)
ax.set_axis_off()
plt.show()
```


    
## Effects of closures on access in Texas (15 pts)

1. 
2. 
3. 
4. 

## Reflecting on the exercise (10 pts) 




Partner_2:   

ZIP codes with at least one hospital closure between 2016 and 2019 are the most directly impacted outcomes. Here we begin by computationally ignoring follow-up in subsequent years of closure, and also defaulting to the idea that hospital closures within a given ZIP code mean fewer visits for residents.  

The current methodology has limitations, such as the fact that distance effectively ignores the population density of the corresponding area in English: zip code areas vary widely in size and population density. Some areas may have a large number of residents, while others are relatively empty. Using zip codes alone to delineate areas may mask the actual distribution of health care needs and resources.  

Improvements can be made by considering a combination of factors: for example, when assessing accessibility to hospitals, taking into account the distribution of populations and residential areas, transportation networks, and public transportation options (which are often included in geographic data as well) can provide a more complete picture of how residents actually travel to hospitals.  